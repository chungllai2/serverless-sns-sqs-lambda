// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "MessageRetentionPeriod": 1209600,
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS FIFO CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "MessageRetentionPeriod": 1209600,
        "QueueName": "some prefixsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;


exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS FIFO with disbaled contentBasedDeduplication CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": false,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "MessageRetentionPeriod": 1209600,
        "QueueName": "some prefixsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": false,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS FIFO with self-define lambda role CF template items 1`] = `
Object {
  "Resources": Object {
    "LambdaRole": Object {
      "Properties": Object {
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:sqs:\${AWS::Region}:\${AWS::AccountId}:some prefixsome-nameQueue.fifo",
                    },
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:sqs:\${AWS::Region}:\${AWS::AccountId}:some prefixsome-nameDeadLetterQueue.fifo",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "LambdaRole",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "MessageRetentionPeriod": 1209600,
        "QueueName": "some prefixsome-nameDeadLetterQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue.fifo",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "some prefixsome-nameQueue.fifo",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "some prefixsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS FIFO with self-define lambda role without DLQ CF template items 1`] = `
Object {
  "Resources": Object {
    "LambdaRole": Object {
      "Properties": Object {
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Sub": "arn:\${AWS::Partition}:sqs:\${AWS::Region}:\${AWS::AccountId}:some prefixsome-nameQueue.fifo",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "LambdaRole",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue.fifo",
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueuePolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Id": "some prefixsome-nameQueue.fifo",
          "Statement": Array [
            Object {
              "Action": "SQS:SendMessage",
              "Condition": Object {
                "ArnEquals": Object {
                  "aws:SourceArn": Array [
                    "arn:aws:sns:us-east-2:123456789012:MyTopic",
                  ],
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "some-nameQueue",
                  "Arn",
                ],
              },
              "Sid": "some prefixsome-nameSid",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "some-nameQueue",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when all parameters are provided should produce valid SQS FIFO without DLQ CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FilterPolicy": Object {
          "pet": Array [
            "dog",
            "cat",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": true,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 7,
        "Enabled": "False",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 99,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "DeduplicationScope": "messageGroup",
        "FifoQueue": true,
        "FifoThroughputLimit": "perMessageGroupId",
        "KmsDataKeyReusePeriodSeconds": 200,
        "KmsMasterKeyId": "some key",
        "QueueName": "some prefixsome-nameQueue.fifo",
        "VisibilityTimeout": 999,
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when encryption parameters are not provided should produce valid SQS CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when no optional parameters are provided should produce valid SQS CF template items 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": "True",
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "QueueName": "null-test-stage-Test-functionsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "null-test-stage-Test-functionsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 5,
        },
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;

exports[`Test Serverless SNS SQS Lambda when overriding the generated CloudFormation template the overrides should take precedence 1`] = `
Object {
  "Resources": Object {
    "Subscribesome-nameTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "Protocol": "sqs",
        "RawMessageDelivery": false,
        "TopicArn": "arn:aws:sns:us-east-2:123456789012:MyTopic",
      },
      "Type": "AWS::SNS::Subscription",
    },
    "Test-functionEventSourceMappingSQSsome-nameQueue": Object {
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": Object {
        "BatchSize": 10,
        "Enabled": false,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "some-nameQueue",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "Test-functionLambdaFunction",
            "Arn",
          ],
        },
        "MaximumBatchingWindowInSeconds": 0,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "some-nameDeadLetterQueue": Object {
      "Properties": Object {
        "MessageRetentionPeriod": 1000,
        "QueueName": "some prefixsome-nameDeadLetterQueue",
      },
      "Type": "AWS::SQS::Queue",
    },
    "some-nameQueue": Object {
      "Properties": Object {
        "QueueName": "some prefixsome-nameQueue",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "some-nameDeadLetterQueue",
              "Arn",
            ],
          },
          "maxReceiveCount": 4,
        },
        "VisibilityTimeout": 4321,
      },
      "Type": "AWS::SQS::Queue",
    },
  },
}
`;
